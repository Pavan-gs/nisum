select * from employees
describe employees
select * from departments

/* CRUD operations */

--TABLE LEVEL--

CREATE TABLE MYSALES (CUST_ID NUMBER(10) NOT NULL, CUST_NAME VARCHAR2(10) NOT NULL, CITY CHAR(10), 
CONSTRAINT MYSALES_PK PRIMARY KEY(CUST_ID))

DESCRIBE mysales

--COLUMN LEVEL--

CREATE TABLE MYSALES1(CUST_ID NUMBER(10) CONSTRAINT MYSALES1_PK PRIMARY KEY, CUST_NAME VARCHAR2(10) NOT NULL, CITY CHAR(10)) 

--ALTER--

SELECT * FROM MYSALES

ALTER TABLE MYSALES ADD(CUST_GENDER CHAR(5), CUST_PROF CHAR(5))
ALTER TABLE MYSALES MODIFY(CUST_PROF VARCHAR2(10))
ALTER TABLE MYSALES DROP COLUMN CUST_PROF
ALTER TABLE MYSALES RENAME TO SALES_DATA

SELECT * FROM SALES_DATA

DROP TABLE MYSALES1

ALTER TABLE SALES_DATA READ ONLY
ALTER TABLE SALES_DATA READ WRITE

INSERT INTO SALES_DATA(CUST_ID, CUST_NAME, CITY, CUST_GENDER) VALUES (101,'JOHN','CA','M')
INSERT INTO SALES_DATA(CUST_ID, CUST_NAME, CITY, CUST_GENDER) VALUES (102,'SEAN','CA','M')
INSERT INTO SALES_DATA(CUST_ID, CUST_NAME, CITY, CUST_GENDER) VALUES (103,'JOHN','CA','M')
INSERT INTO SALES_DATA(CUST_ID, CUST_NAME, CITY, CUST_GENDER) VALUES (103,'JOHN','CA','M')

DELETE FROM SALES_DATA WHERE CUST_ID = 103
SELECT * FROM SALES_DATA
ALTER TABLE SALES_DATA DROP CONSTRAINT MYSALES_PK
ALTER TABLE SALES_DATA ADD CONSTRAINT MYSALES_PK PRIMARY KEY(CUST_ID)
DELETE FROM SALES_DATA WHERE CUST_ID = 103

--SELECT--

SELECT * FROM EMPLOYEES
SELECT FIRST_NAME,LAST_NAME,SALARY FROM EMPLOYEES

SELECT FIRST_NAME,LAST_NAME,SALARY, SALARY*0.15 AS BONUS FROM EMPLOYEES

SELECT FIRST_NAME,LAST_NAME,SALARY, SALARY*0.15  "EXTRA BONUS" FROM EMPLOYEES

SELECT FIRST_NAME,LAST_NAME,SALARY,COMMISSION_PCT,SALARY+COMMISSION_PCT+5000 "EXTRA BONUS" FROM EMPLOYEES

SELECT FIRST_NAME||JOB_ID FROM EMPLOYEES

SELECT FIRST_NAME|| ' is a ' ||JOB_ID FROM EMPLOYEES

SELECT DEPARTMENT_NAME || q'[ DEPARTMENT'S MANAGER IS ]' ||MANAGER_ID FROM DEPARTMENTS

SELECT * FROM DEPARTMENTS

SELECT DEPARTMENT_ID FROM EMPLOYEES

SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES

SELECT 100*8 FROM DUAL
SELECT * FROM DUAL
SELECT SYSDATE FROM DUAL 

--RESTRICT THE DATA--

/* WHERE CLAUSE
=,<=,>=,LIKE, BETWEEN, IN, NULL, AND, OR, NOT */

SELECT LAST_NAME, SALARY 
FROM EMPLOYEES
WHERE DEPARTMENT_ID=60

SELECT LAST_NAME, SALARY 
FROM EMPLOYEES
WHERE SALARY>10000

SELECT LAST_NAME, SALARY 
FROM EMPLOYEES
WHERE SALARY>10000 AND SALARY<20000

SELECT LAST_NAME, SALARY 
FROM EMPLOYEES
WHERE SALARY>10000 AND DEPARTMENT_ID IN(60,90,100)

SELECT LAST_NAME, SALARY 
FROM EMPLOYEES
WHERE SALARY BETWEEN 10000 AND 20000

SELECT LAST_NAME, SALARY 
FROM EMPLOYEES
WHERE LAST_NAME LIKE 'S%'

SELECT LAST_NAME, SALARY 
FROM EMPLOYEES
WHERE LAST_NAME LIKE '_a%'

SELECT LAST_NAME, SALARY, MANAGER_ID 
FROM EMPLOYEES
WHERE MANAGER_ID IS NULL

SELECT LAST_NAME, SALARY, COMMISSION_PCT 
FROM EMPLOYEES
WHERE SALARY>10000
ORDER BY COMMISSION_PCT 

SELECT LAST_NAME, SALARY, COMMISSION_PCT 
FROM EMPLOYEES
WHERE SALARY>10000
ORDER BY SALARY,COMMISSION_PCT

SELECT LAST_NAME, SALARY 
FROM EMPLOYEES
WHERE DEPARTMENT_ID=&id

/* 1)	Query the JOBS table and return a single expression of the form The Job Id for the <job_title’s> job is: <job_id>. 
Take note that the job_title should have an apostrophe and an “s” appended to it to read more naturally. 
A sample of this output for the organization president is: “The Job Id for the President’s job is: AD_PRES.” 
Alias this column expression as “Job Description” using the AS keyword. 

2) Write a query that extracts the JOB_TITLE, MIN_SALARY, and MAX_SALARY columns, as well as an expression called VARIANCE,
which is the difference between the MAX_SALARY and MIN_SALARY values, for each row. 
The result should include only JOB_TITLE values that contain either the word “President” or “Manager.” 
Sort the list in descending order based on the VARIANCE expression. 
If more than one row has the same VARIANCE value, then, sort these rows by JOB_TITLE in reverse alphabetic order. */

--single row functions--

--character fns, date fns, numeric fns--

select last_name from employees
where lower(last_name)='king'

select employee_id, concat(first_name, last_name) "fname", job_id,
length(last_name), instr(last_name, 'a') "contains a?"
from employees
where substr(job_id,4) = 'REP'

SELECT SUBSTR('HI THERE',4,5) FROM DUAL

SELECT ROUND(104.567,2)
FROM DUAL

--DATES--

RR --> BELOW 50 IS 21ST CENTURY, ABOVE 50 IS 20TH CENTURY

78 --> RR --> 1978
78 --> YY --> 2078

22 -->RR--> 2022
22-->YY-->2022

SELECT LAST_NAME, HIRE_DATE, ROUND((SYSDATE-HIRE_DATE)/7,2) "WEEKS"
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN(90,60,100)

--GROUP FUNCTIONS--

SELECT ROUND(AVG(SALARY),2), MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES

SELECT COUNT(*) FROM EMPLOYEES

SELECT ROUND(AVG(SALARY),2), MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES
WHERE JOB_ID LIKE '%REP%'

SELECT JOB_ID,ROUND(AVG(SALARY),2), MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES
GROUP BY(JOB_ID)

SELECT DEPARTMENT_ID, ROUND(AVG(SALARY),2)
FROM EMPLOYEES
GROUP BY(DEPARTMENT_ID)

SELECT DEPARTMENT_ID, JOB_ID, ROUND(AVG(SALARY),2) "AVG"
FROM EMPLOYEES
GROUP BY(DEPARTMENT_ID, JOB_ID)
ORDER BY "AVG" DESC

/* TO RESTRICT THE GROUPED DATA, USE HAVING INSTEAD OF WHERE CLAUSE 

SELECT DEPARTMENT_ID, ROUND(AVG(SALARY),2)
FROM EMPLOYEES
WHERE AVG(SALARY)>10000
GROUP BY(DEPARTMENT_ID) */

SELECT DEPARTMENT_ID, ROUND(AVG(SALARY),2)
FROM EMPLOYEES
GROUP BY(DEPARTMENT_ID)
HAVING AVG(SALARY)>10000

/* JOINS */

SELECT DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID, CITY
FROM DEPARTMENTS
NATURAL JOIN LOCATIONS

SELECT * FROM LOCATIONS
SELECT * FROM DEPARTMENTS
SELECT * FROM EMPLOYEES

SELECT DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID, CITY
FROM DEPARTMENTS
NATURAL JOIN LOCATIONS
WHERE DEPARTMENT_ID IN (60,90,100)

--USING, ON--

SELECT EMPLOYEE_ID, LAST_NAME, LOCATION_ID, DEPARTMENT_ID
FROM EMPLOYEES JOIN DEPARTMENTS
USING(DEPARTMENT_ID)

SELECT EMPLOYEE_ID, LAST_NAME, LOCATION_ID, MANAGER_ID, E.DEPARTMENT_ID
FROM EMPLOYEES E JOIN DEPARTMENTS D
USING(MANAGER_ID)

/* CANNOT ALIAS A COLUMN THAT IS BEING USED IN THE "USING" CLAUSE */
SELECT EMPLOYEE_ID, LAST_NAME, LOCATION_ID, MANAGER_ID, E.DEPARTMENT_ID
FROM EMPLOYEES E JOIN DEPARTMENTS D
USING(MANAGER_ID)
WHERE D.MANAGER_ID = 100

SELECT EMPLOYEE_ID, CITY, DEPARTMENT_NAME, D.DEPARTMENT_ID
FROM EMPLOYEES E 
JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID








